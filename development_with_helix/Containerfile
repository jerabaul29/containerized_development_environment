FROM ubuntu:24.04

# ------------------------------------------------------------
# general metadata about the container

# hard coded args
LABEL author="J Rabault"
LABEL ContainerfileLocation="https://github.com/jerabaul29/containerized_development_environment/tree/main/development_with_helix"
LABEL kind="commandline_application"
LABEL version="0.1"
LABEL description="A container packing a full helix-based development environment."

# automatically grabbed hash
# require to build with flag `--build-arg GIT_HASH="$(git rev-parse HEAD)"`
ARG GIT_HASH="0"
LABEL GIT_HASH=$GIT_HASH

# ------------------------------------------------------------
# all root operations (apt install etc)

USER root

# make sure to use full true colors
ENV TERM xterm-256color
ENV COLORTERM truecolor

# all sudo apt operations in one go; update cache, install, purge cache
RUN apt-get update && apt-get install -y \
    # needed to run appimage apps
    libfuse2t64 \
    wget \
    git \
    tmux \
    htop \
    tree \
    && rm -rf /var/lib/apt/lists/*

# ------------------------------------------------------------
# all user level operations

USER ubuntu

# make sure to use full true colors
ENV TERM xterm-256color
ENV COLORTERM truecolor

# ----------------------------------------
# installation of conda

# TODO: change to: https://github.com/conda-forge/miniforge ; should be much faster

WORKDIR /home/ubuntu/Software/conda

RUN wget --https-only https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    # this is hardcoded for now; retrieved from https://docs.anaconda.com/miniconda/
    # TODO: find a programmatic way to retrieve the hash? or just update by hand when it breaks?
    echo "8d936ba600300e08eca3d874dee88c61c6f39303597b2b66baee54af4f7b4122 Miniconda3-latest-Linux-x86_64.sh" | sha256sum --check && \
    bash Miniconda3-latest-Linux-x86_64.sh -b -p /home/ubuntu/Software/conda/miniconda

# ----------------------------------------
# installation of helix

WORKDIR /home/ubuntu/Software/helix

RUN wget --https-only https://github.com/helix-editor/helix/releases/download/24.07/helix-24.07-x86_64.AppImage && \
    chmod +x helix-24.07-x86_64.AppImage && \
    # for some reason, appimages cannot be just run within podman containers - need to extract and then run the executable
    ./helix-24.07-x86_64.AppImage --appimage-extract

# ----------------------------------------
# cloning of relevant configurations and add ons

WORKDIR /home/ubuntu

RUN \
    # my configs
    git clone https://github.com/jerabaul29/config_scripts_snippets.git --depth=1 && \
    # set up helix config
    mkdir -p /home/ubuntu/.config/helix/ && cp /home/ubuntu/config_scripts_snippets/configs/helix/config.toml /home/ubuntu/.config/helix/config.toml && \
    # TODO: install hj, zg, zx, hg, hx, etc
    # install fzf
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && \
    ~/.fzf/install && \
    # nice tmux conf
    git clone https://github.com/gpakosz/.tmux.git /home/ubuntu/.tmux --depth=1 && \
    ln -s -f .tmux/.tmux.conf && \
    cp config_scripts_snippets/configs/tmux/.tmux.conf.local . && \
    # nice prompt also in git repos
    git clone https://github.com/magicmonty/bash-git-prompt.git /home/ubuntu/.bash-git-prompt --depth=1 && \
    echo "if [ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]; then\nGIT_PROMPT_ONLY_IN_REPO=0\nGIT_PROMPT_THEME=Single_line_Dark\nsource $HOME/.bash-git-prompt/gitprompt.sh\nfi" >> .bashrc

# ----------------------------------------
# setup of bashrc

WORKDIR /home/ubuntu
RUN echo 'alias hlx="/home/ubuntu/Software/helix/squashfs-root/AppRun"' >> .bashrc && \
    echo 'source /home/ubuntu/Software/conda/miniconda/etc/profile.d/conda.sh' >> .bashrc && \
    echo 'conda activate base' >> .bashrc

# ----------------------------------------
# prepare project folder, ready to mount

WORKDIR /home/ubuntu/host_mountpoint
# this has to be mounted by the container user, using the argument
# `--volume PATH_ON_HOST:/home/ubuntu/host_mountpoint `

# ----------------------------------------
# default command is to get a shell with bashrc loaded
# at the host mountpoint location, so this can start to
# be edited

ARG POSIX_TIMESTAMP_CREATION="0"
LABEL POSIX_TIMESTAMP_CREATION=$POSIX_TIMESTAMP_CREATION
ENV POSIX_TIMESTAMP_CREATION=$POSIX_TIMESTAMP_CREATION

CMD /bin/bash -c 'if (( "$(date +%s)" > $((POSIX_TIMESTAMP_CREATION+604800)) )); then read -p "WARNING; the container is built for more than 7 days ago; consider re-building! press ENTER to continue"; fi' && \
    /bin/bash --init-file /home/ubuntu/.bashrc

# TODO: run the correct instance of hj if relevant
# TODO: check if the container is too old; if so, print a warning and request ENTER to proceed
